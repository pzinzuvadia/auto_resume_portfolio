import anthropic
import zipfile
import os
import io
import base64
import httpx
import json

class PortfolioGenerator:
    """
    Generates portfolio websites using Claude API.
    """
    
    def __init__(self, claude_api_key):
        """
        Initialize the portfolio generator with Claude API key.
        
        Args:
            claude_api_key: API key for Anthropic's Claude.
        """
        self.client = anthropic.Anthropic(api_key=claude_api_key)
        # the newest Anthropic model is "claude-3-5-sonnet-20241022" which was released October 22, 2024
        self.model = "claude-3-5-sonnet-20241022"
    
    def create_prompt(self, resume_data, theme_preferences):
        """
        Create a prompt for Claude API to generate a portfolio website.
        
        Args:
            resume_data: Dictionary containing extracted resume information.
            theme_preferences: User-defined theme preferences.
            
        Returns:
            String containing the prompt for Claude API.
        """
        full_name = resume_data.get("name", "")
        email = resume_data.get("email", "")
        phone = resume_data.get("phone", "")
        
        sections_text = ""
        for section_name, section_content in resume_data.get("sections", {}).items():
            sections_text += f"## {section_name}\n{section_content}\n\n"
        
        prompt = (
            f"Create a professional portfolio website for {full_name}.\n\n"
            f"Contact information:\n"
            f"- Email: {email}\n"
            f"- Phone: {phone}\n\n"
            f"Resume content:\n{sections_text}\n"
            f"Design preferences: {theme_preferences}\n\n"
            "Generate a complete HTML file that includes all CSS and JavaScript needed for "
            "a responsive, modern portfolio website. The website should be a single HTML file "
            "that looks professional and showcases the person's skills and experience effectively."
        )
        
        return prompt
    
    def generate_portfolio(self, resume_data, theme):
        """
        Generate a portfolio website using Claude API.
        
        Args:
            resume_data: Dictionary containing extracted resume information.
            theme: Selected theme for the portfolio.
            
        Returns:
            Generated HTML code for the portfolio website.
        """
        try:
            from theme_templates import ThemeTemplates
            system_prompt = ThemeTemplates.get_system_prompt(theme)
            user_prompt = self.create_prompt(resume_data, theme)
            
            response = self.client.messages.create(
                model=self.model,
                max_tokens=4000,
                temperature=0.7,
                system=system_prompt,
                messages=[{"role": "user", "content": user_prompt}]
            )
            
            html_content = response.content[0].text
            
            # Extract HTML code between ```html and ```
            html_pattern = r"```html\s*([\s\S]*?)\s*```"
            import re
            html_match = re.search(html_pattern, html_content)
            
            if html_match:
                return html_match.group(1)
            else:
                return html_content  # Return full response if no HTML code block found
        
        except Exception as e:
            raise Exception(f"Error generating portfolio: {str(e)}")
    
    def create_zip_file(self, html_content, filename="portfolio"):
        """
        Create a ZIP file containing the portfolio website.
        
        Args:
            html_content: HTML code for the portfolio website.
            filename: Base name for the files.
            
        Returns:
            ZIP file as bytes.
        """
        zip_buffer = io.BytesIO()
        
        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            zip_file.writestr(f"{filename}.html", html_content)
            zip_file.writestr("README.txt", (
                "Portfolio Website\n"
                "=================\n\n"
                "This portfolio website was generated by AI Portfolio Generator.\n\n"
                "To view the website, simply open the HTML file in any web browser.\n"
                "The website is self-contained and does not require any external files or internet connection.\n\n"
                "For deployment to services like Netlify or Vercel:\n"
                "1. Upload the HTML file to your GitHub repository\n"
                "2. Connect your repository to Netlify/Vercel\n"
                "3. Follow their deployment instructions\n\n"
                "Enjoy your new portfolio website!"
            ))
        
        zip_buffer.seek(0)
        return zip_buffer.getvalue()

    def encode_html_to_data_uri(self, html_content):
        """
        Encode HTML content as a data URI for preview.
        
        Args:
            html_content: HTML code for the portfolio website.
            
        Returns:
            Data URI for the HTML content.
        """
        encoded_html = base64.b64encode(html_content.encode('utf-8')).decode('utf-8')
        return f"data:text/html;base64,{encoded_html}"
